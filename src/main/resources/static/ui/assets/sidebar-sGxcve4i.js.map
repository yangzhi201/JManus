{"version":3,"mappings":"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","names":["useTaskStore","defineStore","currentTask","ref","taskToInput","hasVisitedHome","prompt","newTask","task","result","stored","payload","planId","DirectApiService","__vitePreload","directApiService","error","query","LlmCheckService","requestBody","response","toolName","replacementParams","uploadedFiles","uploadKey","errorText","errorData","__publicField","PlanActApiService","planTemplateId","rawParam","planJson","versionIndex","cronConfig","SidebarStore","dateValue","a","b","timeA","baseUrl","params","tab","template","versionsResponse","latestContent","parsed","planType","emptyTemplate","i18n","content","e","saveResult","planData","tools","tool","sidebarStore","reactive"],"ignoreList":[],"sources":["../../src/stores/task.ts","../../src/api/direct-api-service.ts","../../src/api/plan-act-api-service.ts","../../src/stores/sidebar.ts"],"sourcesContent":["/*\n * Copyright 2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { defineStore } from 'pinia'\nimport { ref } from 'vue'\n\nexport interface TaskPayload {\n  prompt: string\n  timestamp: number\n  processed?: boolean\n  planId?: string\n  isRunning?: boolean\n}\n\nexport const useTaskStore = defineStore('task', () => {\n  const currentTask = ref<TaskPayload | null>(null)\n  const taskToInput = ref<string>('')\n  const hasVisitedHome = ref(false)\n\n  // Set new task\n  const setTask = (prompt: string) => {\n    console.log('[TaskStore] setTask called with prompt:', prompt)\n\n    // Don't create tasks with empty prompts\n    if (!prompt.trim()) {\n      console.warn('[TaskStore] Empty prompt provided, not creating task')\n      return\n    }\n\n    const newTask = {\n      prompt,\n      timestamp: Date.now(),\n      processed: false,\n    }\n    currentTask.value = newTask\n    console.log('[TaskStore] Task set, currentTask.value:', currentTask.value)\n  }\n\n  // Set task to input (for pre-filling input without executing)\n  const setTaskToInput = (prompt: string) => {\n    console.log('[TaskStore] setTaskToInput called with prompt:', prompt)\n    taskToInput.value = prompt\n    console.log('[TaskStore] Task to input set:', taskToInput.value)\n  }\n\n  // Get and clear task to input\n  const getAndClearTaskToInput = () => {\n    const task = taskToInput.value\n    taskToInput.value = ''\n    console.log('[TaskStore] getAndClearTaskToInput returning:', task)\n    return task\n  }\n\n  // Mark task as processed\n  const markTaskAsProcessed = () => {\n    console.log('[TaskStore] markTaskAsProcessed called, current task:', currentTask.value)\n    if (currentTask.value) {\n      currentTask.value.processed = true\n      console.log('[TaskStore] Task marked as processed:', currentTask.value)\n    } else {\n      console.log('[TaskStore] No current task to mark as processed')\n    }\n  }\n\n  // Clear task\n  const clearTask = () => {\n    currentTask.value = null\n  }\n\n  // Check if there are unprocessed tasks\n  const hasUnprocessedTask = () => {\n    const result = currentTask.value && !currentTask.value.processed\n    console.log(\n      '[TaskStore] hasUnprocessedTask check - currentTask:',\n      currentTask.value,\n      'result:',\n      result\n    )\n    return result\n  }\n\n  // Set that home page has been visited\n  const markHomeVisited = () => {\n    hasVisitedHome.value = true\n    // Save to localStorage\n    localStorage.setItem('hasVisitedHome', 'true')\n  }\n\n  // Check if home page has been visited\n  const checkHomeVisited = () => {\n    const stored = localStorage.getItem('hasVisitedHome')\n    hasVisitedHome.value = stored === 'true'\n    return hasVisitedHome.value\n  }\n\n  // Reset visit status (for debugging or reset)\n  const resetHomeVisited = () => {\n    hasVisitedHome.value = false\n    localStorage.removeItem('hasVisitedHome')\n  }\n\n  // Emit plan execution requested event\n  const emitPlanExecutionRequested = (payload: {\n    title: string\n    planData: any\n    params?: string\n  }) => {\n    console.log('[TaskStore] emitPlanExecutionRequested called with payload:', payload)\n\n    // User is on direct page, send event directly\n    window.dispatchEvent(new CustomEvent('plan-execution-requested', { detail: payload }))\n  }\n\n  // Set task as running with plan ID\n  const setTaskRunning = (planId: string) => {\n    console.log('[TaskStore] setTaskRunning called with planId:', planId)\n    // Create a task if none exists, or update existing one\n    if (!currentTask.value) {\n      // Create a new task for running state\n      currentTask.value = {\n        prompt: '', // Empty prompt since this is just for tracking running state\n        timestamp: Date.now(),\n        processed: false,\n        planId: planId,\n        isRunning: true,\n      }\n      console.log('[TaskStore] Created new task for running state:', currentTask.value)\n    } else {\n      currentTask.value.planId = planId\n      currentTask.value.isRunning = true\n      console.log('[TaskStore] Updated existing task:', currentTask.value)\n    }\n  }\n\n  // Stop current running task\n  const stopCurrentTask = async () => {\n    console.log('[TaskStore] stopCurrentTask called')\n    if (currentTask.value && currentTask.value.isRunning && currentTask.value.planId) {\n      try {\n        const { DirectApiService } = await import('@/api/direct-api-service')\n        await DirectApiService.stopTask(currentTask.value.planId)\n        console.log('[TaskStore] Task stopped successfully')\n\n        // Mark task as no longer running\n        currentTask.value.isRunning = false\n        return true\n      } catch (error) {\n        console.error('[TaskStore] Failed to stop task:', error)\n        return false\n      }\n    }\n    return false\n  }\n\n  // Check if there's a running task\n  const hasRunningTask = () => {\n    const result = currentTask.value && currentTask.value.isRunning\n    console.log('[TaskStore] hasRunningTask check - result:', result)\n    return result\n  }\n\n  return {\n    currentTask,\n    taskToInput,\n    hasVisitedHome,\n    setTask,\n    setTaskToInput,\n    getAndClearTaskToInput,\n    markTaskAsProcessed,\n    clearTask,\n    hasUnprocessedTask,\n    markHomeVisited,\n    checkHomeVisited,\n    resetHomeVisited,\n    emitPlanExecutionRequested,\n    setTaskRunning,\n    stopCurrentTask,\n    hasRunningTask,\n  }\n})\n","/*\n * Copyright 2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LlmCheckService } from '@/utils/llm-check'\nimport type { InputMessage } from \"@/stores/memory\"\n\nexport class DirectApiService {\n  private static readonly BASE_URL = '/api/executor'\n\n  // Send task directly (direct execution mode)\n  public static async sendMessage(query: InputMessage): Promise<any> {\n    return LlmCheckService.withLlmCheck(async () => {\n      // Add Vue identification flag to distinguish from HTTP requests\n      const requestBody = {\n        ...query,\n        isVueRequest: true\n      }\n      \n      const response = await fetch(`${this.BASE_URL}/execute`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody)\n      })\n      if (!response.ok) throw new Error(`API request failed: ${response.status}`)\n      return await response.json()\n    })\n  }\n\n  // Send task using executeByToolNameAsync with default plan template\n  public static async sendMessageWithDefaultPlan(query: InputMessage): Promise<any> {\n    // Use default plan template ID as toolName\n    const toolName = 'default-plan-id-001000222'\n    \n    // Create replacement parameters with user input\n    const replacementParams = {\n      'userRequirement': query.input\n    }\n    \n    return this.executeByToolName(toolName, replacementParams, query.uploadedFiles, query.uploadKey)\n  }\n\n  // Unified method to execute by tool name (replaces both sendMessageWithDefaultPlan and PlanActApiService.executePlan)\n  public static async executeByToolName(\n    toolName: string, \n    replacementParams?: Record<string, string>, \n    uploadedFiles?: string[], \n    uploadKey?: string\n  ): Promise<any> {\n    return LlmCheckService.withLlmCheck(async () => {\n      console.log('[DirectApiService] executeByToolName called with:', { toolName, replacementParams, uploadedFiles, uploadKey })\n      \n      const requestBody: Record<string, any> = {\n        toolName: toolName,\n        isVueRequest: true\n      }\n      \n      // Include replacement parameters if present\n      if (replacementParams && Object.keys(replacementParams).length > 0) {\n        requestBody.replacementParams = replacementParams\n        console.log('[DirectApiService] Including replacement params:', replacementParams)\n      }\n      \n      // Include uploaded files if present\n      if (uploadedFiles && uploadedFiles.length > 0) {\n        requestBody.uploadedFiles = uploadedFiles\n        console.log('[DirectApiService] Including uploaded files:', uploadedFiles.length)\n      }\n      \n      // Include uploadKey if present\n      if (uploadKey) {\n        requestBody.uploadKey = uploadKey\n        console.log('[DirectApiService] Including uploadKey:', uploadKey)\n      }\n      \n      console.log('[DirectApiService] Making request to:', `${this.BASE_URL}/executeByToolNameAsync`)\n      console.log('[DirectApiService] Request body:', requestBody)\n      \n      const response = await fetch(`${this.BASE_URL}/executeByToolNameAsync`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody)\n      })\n      \n      console.log('[DirectApiService] Response status:', response.status, response.ok)\n      \n      if (!response.ok) {\n        const errorText = await response.text()\n        console.error('[DirectApiService] Request failed:', errorText)\n        throw new Error(`Failed to execute: ${response.status}`)\n      }\n      \n      const result = await response.json()\n      console.log('[DirectApiService] executeByToolName response:', result)\n      return result\n    })\n  }\n\n  // Stop a running task by plan ID\n  public static async stopTask(planId: string): Promise<any> {\n    return LlmCheckService.withLlmCheck(async () => {\n      console.log('[DirectApiService] Stopping task for planId:', planId)\n      \n      const response = await fetch(`${this.BASE_URL}/stopTask/${planId}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      })\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}))\n        throw new Error(errorData.error || `Failed to stop task: ${response.status}`)\n      }\n      \n      return await response.json()\n    })\n  }\n}\n","/*\n * Copyright 2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Plan-related API wrapper (TypeScript version for Vue projects)\n\nimport type { CronConfig } from '@/types/cron-task'\nimport { LlmCheckService } from '@/utils/llm-check'\nimport { DirectApiService } from '@/api/direct-api-service'\n\nexport class PlanActApiService {\n  private static readonly PLAN_TEMPLATE_URL = '/api/plan-template'\n  private static readonly CRON_TASK_URL = '/api/cron-tasks'\n\n\n  // Execute generated plan using ManusController.executeByToolNameAsync\n  public static async executePlan(planTemplateId: string, rawParam?: string, uploadedFiles?: string[], replacementParams?: Record<string, string>, uploadKey?: string): Promise<any> {\n    return LlmCheckService.withLlmCheck(async () => {\n      console.log('[PlanActApiService] executePlan called with:', { planTemplateId, rawParam, uploadedFiles, replacementParams, uploadKey})\n      \n      // Add rawParam to replacementParams if provided (backend expects it in replacementParams)\n      if (rawParam) {\n        if (!replacementParams) {\n          replacementParams = {}\n        }\n        replacementParams['userRequirement'] = rawParam\n        console.log('[PlanActApiService] Added rawParam to replacementParams:', rawParam)\n      }\n      \n      // Use the unified DirectApiService method\n      return await DirectApiService.executeByToolName(planTemplateId, replacementParams, uploadedFiles, uploadKey)\n    })\n  }\n\n  // Save plan to server\n  public static async savePlanTemplate(planId: string, planJson: string): Promise<any> {\n    const response = await fetch(`${this.PLAN_TEMPLATE_URL}/save`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ planId, planJson })\n    })\n    if (!response.ok) throw new Error(`Failed to save plan: ${response.status}`)\n    return await response.json()\n  }\n\n  // Get all versions of plan\n  public static async getPlanVersions(planId: string): Promise<any> {\n    const response = await fetch(`${this.PLAN_TEMPLATE_URL}/versions`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ planId })\n    })\n    if (!response.ok) throw new Error(`Failed to get plan versions: ${response.status}`)\n    return await response.json()\n  }\n\n  // Get specific version of plan\n  public static async getVersionPlan(planId: string, versionIndex: number): Promise<any> {\n    const response = await fetch(`${this.PLAN_TEMPLATE_URL}/get-version`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ planId, versionIndex: versionIndex.toString() })\n    })\n    if (!response.ok) throw new Error(`Failed to get specific version plan: ${response.status}`)\n    return await response.json()\n  }\n\n  // Get all plan template list\n  public static async getAllPlanTemplates(): Promise<any> {\n    const response = await fetch(`${this.PLAN_TEMPLATE_URL}/list`)\n    if (!response.ok) throw new Error(`Failed to get plan template list: ${response.status}`)\n    return await response.json()\n  }\n\n\n  // Delete plan template\n  public static async deletePlanTemplate(planId: string): Promise<any> {\n    const response = await fetch(`${this.PLAN_TEMPLATE_URL}/delete`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ planId })\n    })\n    if (!response.ok) throw new Error(`Failed to delete plan template: ${response.status}`)\n    return await response.json()\n  }\n\n  // Create cron task\n  public static async createCronTask(cronConfig: CronConfig): Promise<CronConfig> {\n    const response = await fetch(this.CRON_TASK_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(cronConfig)\n    })\n    if (!response.ok) {\n      try {\n        const errorData = await response.json()\n        throw new Error(errorData.message || `Failed to create cron task: ${response.status}`)\n      } catch {\n        throw new Error(`Failed to create cron task: ${response.status}`)\n      }\n    }\n    return await response.json()\n  }\n\n}\n","/*\n * Copyright 2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { reactive } from 'vue'\nimport { PlanActApiService } from '@/api/plan-act-api-service'\nimport type { PlanTemplate } from '@/types/plan-template'\nimport { i18n } from '@/base/i18n'\nimport { Tool } from '@/api/agent-api-service'\n\ntype TabType = 'list' | 'config'\n\nexport class SidebarStore {\n  // Basic state\n  isCollapsed = true\n  currentTab: TabType = 'list'\n\n  // Template list related state\n  currentPlanTemplateId: string | null = null\n  planTemplateList: PlanTemplate[] = []\n  selectedTemplate: PlanTemplate | null = null\n  isLoading = false\n  errorMessage = ''\n\n  // Configuration related state\n  jsonContent = ''\n  planType = 'dynamic_agent'\n  generatorPrompt = ''\n  executionParams = ''\n  isGenerating = false\n  isExecuting = false\n\n  // Version control\n  planVersions: string[] = []\n  currentVersionIndex = -1\n\n  // Available tools state\n  availableTools: Array<{\n    key: string\n    name: string\n    description: string\n    enabled: boolean\n    serviceGroup: string\n    selectable: boolean\n  }> = []\n  isLoadingTools = false\n  toolsLoadError = ''\n\n  constructor() {\n    // Ensure properties are properly initialized\n    this.planVersions = []\n    this.currentVersionIndex = -1\n  }\n\n  // Helper function to parse date from different formats\n  parseDateTime(dateValue: any): Date {\n    if (!dateValue) {\n      return new Date()\n    }\n\n    // If array format [year, month, day, hour, minute, second, nanosecond]\n    if (Array.isArray(dateValue) && dateValue.length >= 6) {\n      // JavaScript Date constructor months start from 0, so subtract 1\n      return new Date(dateValue[0], dateValue[1] - 1, dateValue[2], dateValue[3], dateValue[4], dateValue[5], Math.floor(dateValue[6] / 1000000))\n    }\n\n    // If string format, parse directly\n    if (typeof dateValue === 'string') {\n      return new Date(dateValue)\n    }\n\n    // Return current time for other cases\n    return new Date()\n  }\n\n  // Computed properties\n  get sortedTemplates(): PlanTemplate[] {\n    return [...this.planTemplateList].sort((a, b) => {\n      const timeA = this.parseDateTime(a.updateTime ?? a.createTime)\n      const timeB = this.parseDateTime(b.updateTime ?? b.createTime)\n      return timeB.getTime() - timeA.getTime()\n    })\n  }\n\n  get canRollback(): boolean {\n    return this.planVersions.length > 1 && this.currentVersionIndex > 0\n  }\n\n  get canRestore(): boolean {\n    return (\n      this.planVersions.length > 1 && this.currentVersionIndex < this.planVersions.length - 1\n    )\n  }\n\n  get computedApiUrl(): string {\n  if (!this.selectedTemplate) return ''\n  const baseUrl = `/api/plan-template/execute/${this.selectedTemplate.id}`\n  const params = this.executionParams.trim()\n  // GET method, parameter name is allParams\n  return params ? `${baseUrl}?allParams=${encodeURIComponent(params)}` : baseUrl\n  }\n\n  // Actions\n  toggleSidebar() {\n    this.isCollapsed = !this.isCollapsed\n  }\n\n  switchToTab(tab: TabType) {\n    this.currentTab = tab\n  }\n\n  async loadPlanTemplateList() {\n    this.isLoading = true\n    this.errorMessage = ''\n    try {\n      console.log('[SidebarStore] Starting to load plan template list...')\n      const response = await PlanActApiService.getAllPlanTemplates()\n      if (response?.templates && Array.isArray(response.templates)) {\n        this.planTemplateList = response.templates\n        console.log(`[SidebarStore] Successfully loaded ${response.templates.length} plan templates`)\n      } else {\n        this.planTemplateList = []\n        console.warn('[SidebarStore] API returned abnormal data format, using empty list', response)\n      }\n    } catch (error: any) {\n      console.error('[SidebarStore] Failed to load plan template list:', error)\n      this.planTemplateList = []\n      this.errorMessage = `Load failed: ${error.message}`\n    } finally {\n      this.isLoading = false\n    }\n  }\n\n  async selectTemplate(template: PlanTemplate) {\n    this.currentPlanTemplateId = template.id\n    this.selectedTemplate = template\n    this.currentTab = 'config'\n    \n    // Clear jsonContent immediately to prevent stale data\n    this.jsonContent = ''\n    \n    await this.loadTemplateData(template)\n    console.log(`[SidebarStore] Selected plan template: ${template.id}`)\n  }\n\n  async loadTemplateData(template: PlanTemplate) {\n    try {\n      const versionsResponse = await PlanActApiService.getPlanVersions(template.id)\n      this.planVersions = versionsResponse.versions || []\n      if (this.planVersions.length > 0) {\n        const latestContent = this.planVersions[this.planVersions.length - 1]\n        this.jsonContent = latestContent\n        this.currentVersionIndex = this.planVersions.length - 1\n        try {\n          const parsed = JSON.parse(latestContent)\n          if (parsed.prompt) {\n            this.generatorPrompt = parsed.prompt\n          }\n          if (parsed.params) {\n            this.executionParams = parsed.params\n          }\n          // Update planType based on the loaded template's JSON content\n          if (parsed.planType) {\n            this.planType = parsed.planType\n            console.log(`[SidebarStore] Updated planType to: ${this.planType}`)\n          }\n        } catch {\n          console.warn('Unable to parse JSON content to get prompt information')\n        }\n      } else {\n        this.jsonContent = ''\n        this.generatorPrompt = ''\n        this.executionParams = ''\n        this.planType = 'dynamic_agent'\n      }\n    } catch (error: any) {\n      console.error('Failed to load template data:', error)\n      throw error\n    }\n  }\n\n  async createNewTemplate(planType: string) {\n    const emptyTemplate: PlanTemplate = {\n      id: `new-${Date.now()}`,\n      title: i18n.global.t('sidebar.newTemplateName'),\n      description: i18n.global.t('sidebar.newTemplateDescription'),\n      createTime: new Date().toISOString(),\n      updateTime: new Date().toISOString(),\n    }\n    this.selectedTemplate = emptyTemplate\n    this.currentPlanTemplateId = null\n    this.jsonContent = ''\n    this.generatorPrompt = ''\n    this.executionParams = ''\n    this.planVersions = []\n    this.currentVersionIndex = -1\n    this.currentTab = 'config'\n    // Reset to default planType for new templates\n    this.planType = planType\n    \n    // Reload available tools to ensure fresh tool list\n    console.log('[SidebarStore] 🔄 Reloading available tools for new template')\n    await this.loadAvailableTools()\n    \n    console.log('[SidebarStore] Created new empty plan template, switching to config tab')\n  }\n\n  async deleteTemplate(template: PlanTemplate) {\n    if (!template.id) {\n      console.warn('[SidebarStore] deleteTemplate: Invalid template object or ID')\n      return\n    }\n    try {\n      await PlanActApiService.deletePlanTemplate(template.id)\n      if (this.currentPlanTemplateId === template.id) {\n        this.clearSelection()\n      }\n      await this.loadPlanTemplateList()\n      console.log(`[SidebarStore] Plan template ${template.id} has been deleted`)\n    } catch (error: any) {\n      console.error('Failed to delete plan template:', error)\n      await this.loadPlanTemplateList()\n      throw error\n    }\n  }\n\n  clearSelection() {\n    this.currentPlanTemplateId = null\n    this.selectedTemplate = null\n    this.jsonContent = ''\n    this.generatorPrompt = ''\n    this.executionParams = ''\n    this.planVersions = []\n    this.currentVersionIndex = -1\n    this.currentTab = 'list'\n  }\n\n  clearExecutionParams() {\n    this.executionParams = ''\n  }\n\n  rollbackVersion() {\n    if (this.canRollback && this.currentVersionIndex > 0) {\n      this.currentVersionIndex--\n      this.jsonContent = this.planVersions[this.currentVersionIndex] || ''\n    }\n  }\n\n  restoreVersion() {\n    if (this.canRestore && this.currentVersionIndex < this.planVersions.length - 1) {\n      this.currentVersionIndex++\n      this.jsonContent = this.planVersions[this.currentVersionIndex] || ''\n    }\n  }\n\n  async saveTemplate() {\n    if (!this.selectedTemplate) return\n    const content = this.jsonContent.trim()\n    if (!content) {\n      throw new Error('Content cannot be empty')\n    }\n    try {\n      JSON.parse(content)\n    } catch (e: any) {\n      throw new Error('Invalid format, please correct and save.\\nError: ' + e.message)\n    }\n    try {\n      const saveResult = await PlanActApiService.savePlanTemplate(\n        this.selectedTemplate.id,\n        content\n      )\n      \n      // Update the selected template ID with the real planId returned from backend\n      if (saveResult?.planId && this.selectedTemplate.id.startsWith('new-')) {\n        console.log('[SidebarStore] Updating template ID from', this.selectedTemplate.id, 'to', saveResult.planId)\n        this.selectedTemplate.id = saveResult.planId\n        this.currentPlanTemplateId = saveResult.planId\n      }\n      \n      if (this.currentVersionIndex < this.planVersions.length - 1) {\n        this.planVersions = this.planVersions.slice(0, this.currentVersionIndex + 1)\n      }\n      this.planVersions.push(content)\n      this.currentVersionIndex = this.planVersions.length - 1\n      return saveResult\n    } catch (error: any) {\n      console.error('Failed to save plan template:', error)\n      throw error\n    }\n  }\n\n\n\n  preparePlanExecution() {\n    if (!this.selectedTemplate) return null\n    this.isExecuting = true\n    try {\n      let planData\n      try {\n        planData = JSON.parse(this.jsonContent)\n        planData.planTemplateId = this.selectedTemplate.id\n      } catch {\n        throw new Error('Failed to parse plan data')\n      }\n      const title = this.selectedTemplate.title ?? planData.title ?? 'Execution Plan'\n      return {\n        title,\n        planData,\n        params: this.executionParams.trim() || undefined,\n        replacementParams: undefined as Record<string, string> | undefined\n      }\n    } catch (error: any) {\n      console.error('Failed to prepare plan execution:', error)\n      this.isExecuting = false\n      throw error\n    }\n  }\n\n  finishPlanExecution() {\n    this.isExecuting = false\n  }\n  // Load available tools from backend\n  async loadAvailableTools() {\n    if (this.isLoadingTools) {\n      return // Avoid duplicate requests\n    }\n\n    this.isLoadingTools = true\n    this.toolsLoadError = ''\n\n    try {\n      console.log('[SidebarStore] Loading available tools...')\n      const response = await fetch('/api/agents/tools')\n      \n      if (response.ok) {\n        const tools = await response.json()\n        console.log('[SidebarStore] Loaded available tools:', tools)\n        // Transform tools to ensure they have all required fields\n        this.availableTools = tools.map((tool: Tool) => ({\n          key: tool.key || '',\n          name: tool.name || '',\n          description: tool.description || '',\n          enabled: tool.enabled || false,\n          serviceGroup: tool.serviceGroup || 'default',\n          selectable: tool.selectable\n        }))\n      } else {\n        console.error('[SidebarStore] Failed to load tools:', response.statusText)\n        this.toolsLoadError = `Failed to load tools: ${response.statusText}`\n        this.availableTools = []\n      }\n    } catch (error) {\n      console.error('[SidebarStore] Error loading tools:', error)\n      this.toolsLoadError = error instanceof Error ? error.message : 'Unknown error'\n      this.availableTools = []\n    } finally {\n      this.isLoadingTools = false\n    }\n  }\n}\n\nexport const sidebarStore = reactive(new SidebarStore())\n\n"],"file":"assets/sidebar-sGxcve4i.js"}