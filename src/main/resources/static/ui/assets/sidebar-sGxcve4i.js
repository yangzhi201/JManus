var S=Object.defineProperty;var k=(a,e,t)=>e in a?S(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var n=(a,e,t)=>k(a,typeof e!="symbol"?e+"":e,t);import{Q as f,r as h,_ as w,C as y,R as g}from"./index-DaRQAtmK.js";import{L as p}from"./llm-check-S84pbv31.js";const j=f("task",()=>{const a=h(null),e=h(""),t=h(!1);return{currentTask:a,taskToInput:e,hasVisitedHome:t,setTask:o=>{if(console.log("[TaskStore] setTask called with prompt:",o),!o.trim()){console.warn("[TaskStore] Empty prompt provided, not creating task");return}const u={prompt:o,timestamp:Date.now(),processed:!1};a.value=u,console.log("[TaskStore] Task set, currentTask.value:",a.value)},setTaskToInput:o=>{console.log("[TaskStore] setTaskToInput called with prompt:",o),e.value=o,console.log("[TaskStore] Task to input set:",e.value)},getAndClearTaskToInput:()=>{const o=e.value;return e.value="",console.log("[TaskStore] getAndClearTaskToInput returning:",o),o},markTaskAsProcessed:()=>{console.log("[TaskStore] markTaskAsProcessed called, current task:",a.value),a.value?(a.value.processed=!0,console.log("[TaskStore] Task marked as processed:",a.value)):console.log("[TaskStore] No current task to mark as processed")},clearTask:()=>{a.value=null},hasUnprocessedTask:()=>{const o=a.value&&!a.value.processed;return console.log("[TaskStore] hasUnprocessedTask check - currentTask:",a.value,"result:",o),o},markHomeVisited:()=>{t.value=!0,localStorage.setItem("hasVisitedHome","true")},checkHomeVisited:()=>{const o=localStorage.getItem("hasVisitedHome");return t.value=o==="true",t.value},resetHomeVisited:()=>{t.value=!1,localStorage.removeItem("hasVisitedHome")},emitPlanExecutionRequested:o=>{console.log("[TaskStore] emitPlanExecutionRequested called with payload:",o),window.dispatchEvent(new CustomEvent("plan-execution-requested",{detail:o}))},setTaskRunning:o=>{console.log("[TaskStore] setTaskRunning called with planId:",o),a.value?(a.value.planId=o,a.value.isRunning=!0,console.log("[TaskStore] Updated existing task:",a.value)):(a.value={prompt:"",timestamp:Date.now(),processed:!1,planId:o,isRunning:!0},console.log("[TaskStore] Created new task for running state:",a.value))},stopCurrentTask:async()=>{if(console.log("[TaskStore] stopCurrentTask called"),a.value&&a.value.isRunning&&a.value.planId)try{const{DirectApiService:o}=await w(async()=>{const{DirectApiService:u}=await Promise.resolve().then(()=>v);return{DirectApiService:u}},void 0);return await o.stopTask(a.value.planId),console.log("[TaskStore] Task stopped successfully"),a.value.isRunning=!1,!0}catch(o){return console.error("[TaskStore] Failed to stop task:",o),!1}return!1},hasRunningTask:()=>{const o=a.value&&a.value.isRunning;return console.log("[TaskStore] hasRunningTask check - result:",o),o}}});class T{static async sendMessage(e){return p.withLlmCheck(async()=>{const t={...e,isVueRequest:!0},s=await fetch(`${this.BASE_URL}/execute`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!s.ok)throw new Error(`API request failed: ${s.status}`);return await s.json()})}static async sendMessageWithDefaultPlan(e){const t="default-plan-id-001000222",s={userRequirement:e.input};return this.executeByToolName(t,s,e.uploadedFiles,e.uploadKey)}static async executeByToolName(e,t,s,r){return p.withLlmCheck(async()=>{console.log("[DirectApiService] executeByToolName called with:",{toolName:e,replacementParams:t,uploadedFiles:s,uploadKey:r});const i={toolName:e,isVueRequest:!0};t&&Object.keys(t).length>0&&(i.replacementParams=t,console.log("[DirectApiService] Including replacement params:",t)),s&&s.length>0&&(i.uploadedFiles=s,console.log("[DirectApiService] Including uploaded files:",s.length)),r&&(i.uploadKey=r,console.log("[DirectApiService] Including uploadKey:",r)),console.log("[DirectApiService] Making request to:",`${this.BASE_URL}/executeByToolNameAsync`),console.log("[DirectApiService] Request body:",i);const l=await fetch(`${this.BASE_URL}/executeByToolNameAsync`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(console.log("[DirectApiService] Response status:",l.status,l.ok),!l.ok){const m=await l.text();throw console.error("[DirectApiService] Request failed:",m),new Error(`Failed to execute: ${l.status}`)}const d=await l.json();return console.log("[DirectApiService] executeByToolName response:",d),d})}static async stopTask(e){return p.withLlmCheck(async()=>{console.log("[DirectApiService] Stopping task for planId:",e);const t=await fetch(`${this.BASE_URL}/stopTask/${e}`,{method:"POST",headers:{"Content-Type":"application/json"}});if(!t.ok){const s=await t.json().catch(()=>({}));throw new Error(s.error||`Failed to stop task: ${t.status}`)}return await t.json()})}}n(T,"BASE_URL","/api/executor");const v=Object.freeze(Object.defineProperty({__proto__:null,DirectApiService:T},Symbol.toStringTag,{value:"Module"}));class c{static async executePlan(e,t,s,r,i){return p.withLlmCheck(async()=>(console.log("[PlanActApiService] executePlan called with:",{planTemplateId:e,rawParam:t,uploadedFiles:s,replacementParams:r,uploadKey:i}),t&&(r||(r={}),r.userRequirement=t,console.log("[PlanActApiService] Added rawParam to replacementParams:",t)),await T.executeByToolName(e,r,s,i)))}static async savePlanTemplate(e,t){const s=await fetch(`${this.PLAN_TEMPLATE_URL}/save`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({planId:e,planJson:t})});if(!s.ok)throw new Error(`Failed to save plan: ${s.status}`);return await s.json()}static async getPlanVersions(e){const t=await fetch(`${this.PLAN_TEMPLATE_URL}/versions`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({planId:e})});if(!t.ok)throw new Error(`Failed to get plan versions: ${t.status}`);return await t.json()}static async getVersionPlan(e,t){const s=await fetch(`${this.PLAN_TEMPLATE_URL}/get-version`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({planId:e,versionIndex:t.toString()})});if(!s.ok)throw new Error(`Failed to get specific version plan: ${s.status}`);return await s.json()}static async getAllPlanTemplates(){const e=await fetch(`${this.PLAN_TEMPLATE_URL}/list`);if(!e.ok)throw new Error(`Failed to get plan template list: ${e.status}`);return await e.json()}static async deletePlanTemplate(e){const t=await fetch(`${this.PLAN_TEMPLATE_URL}/delete`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({planId:e})});if(!t.ok)throw new Error(`Failed to delete plan template: ${t.status}`);return await t.json()}static async createCronTask(e){const t=await fetch(this.CRON_TASK_URL,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)try{const s=await t.json();throw new Error(s.message||`Failed to create cron task: ${t.status}`)}catch{throw new Error(`Failed to create cron task: ${t.status}`)}return await t.json()}}n(c,"PLAN_TEMPLATE_URL","/api/plan-template"),n(c,"CRON_TASK_URL","/api/cron-tasks");const D=Object.freeze(Object.defineProperty({__proto__:null,PlanActApiService:c},Symbol.toStringTag,{value:"Module"}));class P{constructor(){n(this,"isCollapsed",!0);n(this,"currentTab","list");n(this,"currentPlanTemplateId",null);n(this,"planTemplateList",[]);n(this,"selectedTemplate",null);n(this,"isLoading",!1);n(this,"errorMessage","");n(this,"jsonContent","");n(this,"planType","dynamic_agent");n(this,"generatorPrompt","");n(this,"executionParams","");n(this,"isGenerating",!1);n(this,"isExecuting",!1);n(this,"planVersions",[]);n(this,"currentVersionIndex",-1);n(this,"availableTools",[]);n(this,"isLoadingTools",!1);n(this,"toolsLoadError","");this.planVersions=[],this.currentVersionIndex=-1}parseDateTime(e){return e?Array.isArray(e)&&e.length>=6?new Date(e[0],e[1]-1,e[2],e[3],e[4],e[5],Math.floor(e[6]/1e6)):typeof e=="string"?new Date(e):new Date:new Date}get sortedTemplates(){return[...this.planTemplateList].sort((e,t)=>{const s=this.parseDateTime(e.updateTime??e.createTime);return this.parseDateTime(t.updateTime??t.createTime).getTime()-s.getTime()})}get canRollback(){return this.planVersions.length>1&&this.currentVersionIndex>0}get canRestore(){return this.planVersions.length>1&&this.currentVersionIndex<this.planVersions.length-1}get computedApiUrl(){if(!this.selectedTemplate)return"";const e=`/api/plan-template/execute/${this.selectedTemplate.id}`,t=this.executionParams.trim();return t?`${e}?allParams=${encodeURIComponent(t)}`:e}toggleSidebar(){this.isCollapsed=!this.isCollapsed}switchToTab(e){this.currentTab=e}async loadPlanTemplateList(){this.isLoading=!0,this.errorMessage="";try{console.log("[SidebarStore] Starting to load plan template list...");const e=await c.getAllPlanTemplates();e!=null&&e.templates&&Array.isArray(e.templates)?(this.planTemplateList=e.templates,console.log(`[SidebarStore] Successfully loaded ${e.templates.length} plan templates`)):(this.planTemplateList=[],console.warn("[SidebarStore] API returned abnormal data format, using empty list",e))}catch(e){console.error("[SidebarStore] Failed to load plan template list:",e),this.planTemplateList=[],this.errorMessage=`Load failed: ${e.message}`}finally{this.isLoading=!1}}async selectTemplate(e){this.currentPlanTemplateId=e.id,this.selectedTemplate=e,this.currentTab="config",this.jsonContent="",await this.loadTemplateData(e),console.log(`[SidebarStore] Selected plan template: ${e.id}`)}async loadTemplateData(e){try{const t=await c.getPlanVersions(e.id);if(this.planVersions=t.versions||[],this.planVersions.length>0){const s=this.planVersions[this.planVersions.length-1];this.jsonContent=s,this.currentVersionIndex=this.planVersions.length-1;try{const r=JSON.parse(s);r.prompt&&(this.generatorPrompt=r.prompt),r.params&&(this.executionParams=r.params),r.planType&&(this.planType=r.planType,console.log(`[SidebarStore] Updated planType to: ${this.planType}`))}catch{console.warn("Unable to parse JSON content to get prompt information")}}else this.jsonContent="",this.generatorPrompt="",this.executionParams="",this.planType="dynamic_agent"}catch(t){throw console.error("Failed to load template data:",t),t}}async createNewTemplate(e){const t={id:`new-${Date.now()}`,title:g.global.t("sidebar.newTemplateName"),description:g.global.t("sidebar.newTemplateDescription"),createTime:new Date().toISOString(),updateTime:new Date().toISOString()};this.selectedTemplate=t,this.currentPlanTemplateId=null,this.jsonContent="",this.generatorPrompt="",this.executionParams="",this.planVersions=[],this.currentVersionIndex=-1,this.currentTab="config",this.planType=e,console.log("[SidebarStore] 🔄 Reloading available tools for new template"),await this.loadAvailableTools(),console.log("[SidebarStore] Created new empty plan template, switching to config tab")}async deleteTemplate(e){if(!e.id){console.warn("[SidebarStore] deleteTemplate: Invalid template object or ID");return}try{await c.deletePlanTemplate(e.id),this.currentPlanTemplateId===e.id&&this.clearSelection(),await this.loadPlanTemplateList(),console.log(`[SidebarStore] Plan template ${e.id} has been deleted`)}catch(t){throw console.error("Failed to delete plan template:",t),await this.loadPlanTemplateList(),t}}clearSelection(){this.currentPlanTemplateId=null,this.selectedTemplate=null,this.jsonContent="",this.generatorPrompt="",this.executionParams="",this.planVersions=[],this.currentVersionIndex=-1,this.currentTab="list"}clearExecutionParams(){this.executionParams=""}rollbackVersion(){this.canRollback&&this.currentVersionIndex>0&&(this.currentVersionIndex--,this.jsonContent=this.planVersions[this.currentVersionIndex]||"")}restoreVersion(){this.canRestore&&this.currentVersionIndex<this.planVersions.length-1&&(this.currentVersionIndex++,this.jsonContent=this.planVersions[this.currentVersionIndex]||"")}async saveTemplate(){if(!this.selectedTemplate)return;const e=this.jsonContent.trim();if(!e)throw new Error("Content cannot be empty");try{JSON.parse(e)}catch(t){throw new Error(`Invalid format, please correct and save.
Error: `+t.message)}try{const t=await c.savePlanTemplate(this.selectedTemplate.id,e);return t!=null&&t.planId&&this.selectedTemplate.id.startsWith("new-")&&(console.log("[SidebarStore] Updating template ID from",this.selectedTemplate.id,"to",t.planId),this.selectedTemplate.id=t.planId,this.currentPlanTemplateId=t.planId),this.currentVersionIndex<this.planVersions.length-1&&(this.planVersions=this.planVersions.slice(0,this.currentVersionIndex+1)),this.planVersions.push(e),this.currentVersionIndex=this.planVersions.length-1,t}catch(t){throw console.error("Failed to save plan template:",t),t}}preparePlanExecution(){if(!this.selectedTemplate)return null;this.isExecuting=!0;try{let e;try{e=JSON.parse(this.jsonContent),e.planTemplateId=this.selectedTemplate.id}catch{throw new Error("Failed to parse plan data")}return{title:this.selectedTemplate.title??e.title??"Execution Plan",planData:e,params:this.executionParams.trim()||void 0,replacementParams:void 0}}catch(e){throw console.error("Failed to prepare plan execution:",e),this.isExecuting=!1,e}}finishPlanExecution(){this.isExecuting=!1}async loadAvailableTools(){if(!this.isLoadingTools){this.isLoadingTools=!0,this.toolsLoadError="";try{console.log("[SidebarStore] Loading available tools...");const e=await fetch("/api/agents/tools");if(e.ok){const t=await e.json();console.log("[SidebarStore] Loaded available tools:",t),this.availableTools=t.map(s=>({key:s.key||"",name:s.name||"",description:s.description||"",enabled:s.enabled||!1,serviceGroup:s.serviceGroup||"default",selectable:s.selectable}))}else console.error("[SidebarStore] Failed to load tools:",e.statusText),this.toolsLoadError=`Failed to load tools: ${e.statusText}`,this.availableTools=[]}catch(e){console.error("[SidebarStore] Error loading tools:",e),this.toolsLoadError=e instanceof Error?e.message:"Unknown error",this.availableTools=[]}finally{this.isLoadingTools=!1}}}}const $=y(new P);export{T as D,c as P,v as d,D as p,$ as s,j as u};
//# sourceMappingURL=sidebar-sGxcve4i.js.map
